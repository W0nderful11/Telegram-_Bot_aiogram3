import logging
import random
import wikipedia
import ollama
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    ReplyKeyboardRemove
from pymongo import MongoClient
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
#BOT_TOKEN = os.getenv("BOT_TOKEN")
#MONGO_URL = os.getenv("MONGO_URL")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient(MONGO_URL)
db = client["bot_database"]
users_collection = db["users"]

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ Wikipedia
wikipedia.set_lang("ru")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class MailingState(StatesGroup):
    waiting_for_message = State()

class WikiState(StatesGroup):
    waiting_for_query = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/game"), KeyboardButton(text="/wiki")],
        [KeyboardButton(text="/mailing"), KeyboardButton(text="/show_all")]
    ],
    resize_keyboard=True
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
WELCOME_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç:
ü™®‚úÇÔ∏èüìú –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥—É ‚Äî /game
üìñüîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ ‚Äî /wiki
üì©üì¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ‚Äî /mailing
üë•üìú –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî /show_all

–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòä
"""

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if not users_collection.find_one({"user_id": user_id}):
        users_collection.insert_one({"user_id": user_id})

    await message.answer(WELCOME_MESSAGE, reply_markup=menu_keyboard)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä—ã
game_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö–∞–º–µ–Ω—å", callback_data="rock"),
     InlineKeyboardButton(text="–ù–æ–∂–Ω–∏—Ü—ã", callback_data="scissors"),
     InlineKeyboardButton(text="–ë—É–º–∞–≥–∞", callback_data="paper")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
])

@dp.message(Command("game"))
async def cmd_game(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=game_keyboard)

@dp.callback_query(F.data.in_(["rock", "scissors", "paper"]))
async def process_game_choice(callback: types.CallbackQuery):
    user_choice = callback.data
    bot_choice = random.choice(["rock", "scissors", "paper"])

    choices = {"rock": "–ö–∞–º–µ–Ω—å", "scissors": "–ù–æ–∂–Ω–∏—Ü—ã", "paper": "–ë—É–º–∞–≥–∞"}
    user_text = choices[user_choice]
    bot_text = choices[bot_choice]

    result = determine_winner(user_choice, bot_choice)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_text}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_text}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
                                     reply_markup=game_keyboard)

def determine_winner(user_choice, bot_choice):
    if user_choice == bot_choice:
        return "–ù–∏—á—å—è!"
    elif (user_choice == "rock" and bot_choice == "scissors") or \
            (user_choice == "scissors" and bot_choice == "paper") or \
            (user_choice == "paper" and bot_choice == "rock"):
        return "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
    return "–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!"

@dp.message(Command("wiki"))
async def cmd_wiki(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏:")
    await state.set_state(WikiState.waiting_for_query)

@dp.message(StateFilter(WikiState.waiting_for_query))
async def process_wiki_query(message: types.Message, state: FSMContext):
    query = message.text + "?"  # –î–æ–±–∞–≤–ª—è–µ–º "?" –≤ –∫–æ–Ω–µ—Ü –∑–∞–ø—Ä–æ—Å–∞
    search_result = search_wikipedia(query)
    await message.answer(search_result)
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message(Command("mailing"))
async def cmd_mailing(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MailingState.waiting_for_message)

@dp.message(StateFilter(MailingState.waiting_for_message))
async def process_mailing_message(message: types.Message, state: FSMContext):
    mailing_text = message.text
    users = users_collection.find({}, {"user_id": 1})

    for user in users:
        try:
            await bot.send_message(chat_id=user["user_id"], text=mailing_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=menu_keyboard)
    await state.clear()

@dp.message(Command("show_all"))
async def show_all_users(message: types.Message):
    users = list(users_collection.find({}, {"user_id": 1}))
    if not users:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    user_ids = [str(user["user_id"]) for user in users]
    chunks = [user_ids[i:i + 100] for i in range(0, len(user_ids), 100)]

    for chunk in chunks:
        await message.answer("–°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(chunk))

@dp.callback_query(F.data == "back_to_menu")
async def callback_back(callback: types.CallbackQuery):
    await cmd_start(callback.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.answer()

def search_wikipedia(query: str):
    try:
        page = wikipedia.page(query)
        summary = wikipedia.summary(query, sentences=5)
        return f"üìö –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\n{summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {page.url}"
    except wikipedia.exceptions.PageError:
        return "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    except wikipedia.exceptions.DisambiguationError as e:
        options = "\n".join(e.options[:5])
        return f"üîç –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n{options}"
    except Exception as e:
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"

@dp.message(F.text & ~F.text.startswith("/"))
async def process_message(message: types.Message, state: FSMContext):
    if await state.get_state() == MailingState.waiting_for_message:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    text = message.text.lower()
    game_triggers = ["–∏–≥—Ä–∞", "–ø–æ–∏–≥—Ä–∞—Ç—å", "—Å—ã–≥—Ä–∞–µ–º", "game", "–∏–≥—Ä–∞—Ç—å"]
    if any(trigger in text for trigger in game_triggers):
        await message.answer("üéÆ –î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /game", reply_markup=menu_keyboard)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Ollama
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        context = [
            {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ Stratton ‚Äî —ç—Ç–æ —Ç–≤–æ–µ –∏–º—è –∏ —Ç—ã –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –ø–æ–º–æ—â–∏."},
            {"role": "user", "content": message.text}
        ]
        response = ollama.chat(model="llama3.2", messages=context)
        answer = response.get('message', {}).get('content', '').strip()
        await message.answer(answer)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Ollama: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())